/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface SqrtPriceMathEchidnaTestInterface extends utils.Interface {
  functions: {
    "getAmount0DeltaEquivalency(uint160,uint160,uint128,bool)": FunctionFragment;
    "getAmount0DeltaInvariants(uint160,uint160,uint128)": FunctionFragment;
    "getAmount0DeltaSignedInvariants(uint160,uint160,int128)": FunctionFragment;
    "getAmount1DeltaInvariants(uint160,uint160,uint128)": FunctionFragment;
    "getAmount1DeltaSignedInvariants(uint160,uint160,int128)": FunctionFragment;
    "getInRangeMintInvariants(uint160,uint160,uint160,int128)": FunctionFragment;
    "getNextSqrtPriceFromAmount0RoundingUpInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromAmount1RoundingDownInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromInputInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getNextSqrtPriceFromOutputInvariants(uint160,uint128,uint256,bool)": FunctionFragment;
    "getOutOfRangeMintInvariants(uint160,uint160,int128)": FunctionFragment;
    "mulDivRoundingUpInvariants(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAmount0DeltaEquivalency"
      | "getAmount0DeltaInvariants"
      | "getAmount0DeltaSignedInvariants"
      | "getAmount1DeltaInvariants"
      | "getAmount1DeltaSignedInvariants"
      | "getInRangeMintInvariants"
      | "getNextSqrtPriceFromAmount0RoundingUpInvariants"
      | "getNextSqrtPriceFromAmount1RoundingDownInvariants"
      | "getNextSqrtPriceFromInputInvariants"
      | "getNextSqrtPriceFromOutputInvariants"
      | "getOutOfRangeMintInvariants"
      | "mulDivRoundingUpInvariants"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmount0DeltaEquivalency",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount0DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1DeltaSignedInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutOfRangeMintInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDivRoundingUpInvariants",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmount0DeltaEquivalency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount0DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmount1DeltaSignedInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount0RoundingUpInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromAmount1RoundingDownInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromInputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSqrtPriceFromOutputInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutOfRangeMintInvariants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mulDivRoundingUpInvariants",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SqrtPriceMathEchidnaTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SqrtPriceMathEchidnaTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getAmount0DeltaEquivalency(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount0DeltaInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount0DeltaSignedInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount1DeltaInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getAmount1DeltaSignedInvariants(
    sqrtP: BigNumberish,
    sqrtQ: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getInRangeMintInvariants(
    sqrtLower: BigNumberish,
    sqrtCurrent: BigNumberish,
    sqrtUpper: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromAmount0RoundingUpInvariants(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromAmount1RoundingDownInvariants(
    sqrtPX96: BigNumberish,
    liquidity: BigNumberish,
    amount: BigNumberish,
    add: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromInputInvariants(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountIn: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getNextSqrtPriceFromOutputInvariants(
    sqrtP: BigNumberish,
    liquidity: BigNumberish,
    amountOut: BigNumberish,
    zeroForOne: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  getOutOfRangeMintInvariants(
    sqrtA: BigNumberish,
    sqrtB: BigNumberish,
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  mulDivRoundingUpInvariants(
    x: BigNumberish,
    y: BigNumberish,
    z: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAmount0DeltaEquivalency(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount0DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount0DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount1DeltaInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount1DeltaSignedInvariants(
      sqrtP: BigNumberish,
      sqrtQ: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInRangeMintInvariants(
      sqrtLower: BigNumberish,
      sqrtCurrent: BigNumberish,
      sqrtUpper: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromAmount0RoundingUpInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromAmount1RoundingDownInvariants(
      sqrtPX96: BigNumberish,
      liquidity: BigNumberish,
      amount: BigNumberish,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromInputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountIn: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextSqrtPriceFromOutputInvariants(
      sqrtP: BigNumberish,
      liquidity: BigNumberish,
      amountOut: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutOfRangeMintInvariants(
      sqrtA: BigNumberish,
      sqrtB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDivRoundingUpInvariants(
      x: BigNumberish,
      y: BigNumberish,
      z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
