/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BitMathTest,
  BitMathTestInterface,
} from "../../../../contracts/uniswap-v3-core/test/BitMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "getGasCostOfLeastSignificantBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "getGasCostOfMostSignificantBit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "leastSignificantBit",
    outputs: [
      {
        internalType: "uint8",
        name: "r",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "mostSignificantBit",
    outputs: [
      {
        internalType: "uint8",
        name: "r",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b6105d7806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100505760003560e01c806246b777146100565780636b83cf2614610086578063d230d23f146100b6578063e6bcbc65146100e657610050565b60006000fd5b610070600480360381019061006b91906104bf565b610116565b60405161007d91906104dd565b60405180910390f35b6100a0600480360381019061009b91906104bf565b610147565b6040516100ad91906104dd565b60405180910390f35b6100d060048036038101906100cb91906104bf565b610178565b6040516100dd91906104ef565b60405180910390f35b61010060048036038101906100fb91906104bf565b610195565b60405161010d91906104ef565b60405180910390f35b600060005a905061012c836101b263ffffffff16565b505a816101399190610535565b91505061014256505b919050565b600060005a905061015d8361030863ffffffff16565b505a8161016a9190610535565b91505061017356505b919050565b60006101898261030863ffffffff16565b9050610190565b919050565b60006101a6826101b263ffffffff16565b90506101ad565b919050565b60006000821115156101c45760006000fd5b700100000000000000000000000000000000821015156101f957608082901c915081506080816101f49190610554565b905080505b680100000000000000008210151561022657604082901c915081506040816102219190610554565b905080505b6401000000008210151561024f57602082901c9150815060208161024a9190610554565b905080505b620100008210151561027657601082901c915081506010816102719190610554565b905080505b6101008210151561029c57600882901c915081506008816102979190610554565b905080505b6010821015156102c157600482901c915081506004816102bc9190610554565b905080505b6004821015156102e657600282901c915081506002816102e19190610554565b905080505b600282101515610302576001816102fd9190610554565b905080505b5b919050565b600060008211151561031a5760006000fd5b60ff9050805060006fffffffffffffffffffffffffffffffff6fffffffffffffffffffffffffffffffff16831611156103635760808161035a919061057a565b9050805061036d565b608082901c915081505b600067ffffffffffffffff67ffffffffffffffff16831611156103a057604081610397919061057a565b905080506103aa565b604082901c915081505b600063ffffffff63ffffffff16831611156103d5576020816103cc919061057a565b905080506103df565b602082901c915081505b600061ffff61ffff1683161115610406576010816103fd919061057a565b90508050610410565b601082901c915081505b600060ff60ff16831611156104355760088161042c919061057a565b9050805061043f565b600882901c915081505b6000600f8316111561046157600481610458919061057a565b9050805061046b565b600482901c915081505b600060038316111561048d57600281610484919061057a565b90508050610497565b600282901c915081505b60006001831611156104b5576001816104b0919061057a565b905080505b5b919050566105a0565b6000602082840312156104d25760006000fd5b813590505b92915050565b60006020820190508282525b92915050565b600060208201905060ff831682525b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b600082820390508181111561054d5761054c610504565b5b5b92915050565b600060ff831660ff831601905060ff81111561057357610572610504565b5b5b92915050565b600060ff831660ff831603905060ff81111561059957610598610504565b5b5b92915050565bfea2646970667358221220f6a1ea19e361c77dd524300a90a57b1e120819c12e77c5e83682904e2bb27a3f64736f6c63430008100033";

type BitMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BitMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BitMathTest__factory extends ContractFactory {
  constructor(...args: BitMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BitMathTest> {
    return super.deploy(overrides || {}) as Promise<BitMathTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BitMathTest {
    return super.attach(address) as BitMathTest;
  }
  override connect(signer: Signer): BitMathTest__factory {
    return super.connect(signer) as BitMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BitMathTestInterface {
    return new utils.Interface(_abi) as BitMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BitMathTest {
    return new Contract(address, _abi, signerOrProvider) as BitMathTest;
  }
}
