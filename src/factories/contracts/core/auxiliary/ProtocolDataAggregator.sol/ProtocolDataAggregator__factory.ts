/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ProtocolDataAggregator,
  ProtocolDataAggregatorInterface,
} from "../../../../../contracts/core/auxiliary/ProtocolDataAggregator.sol/ProtocolDataAggregator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IGovernor",
            name: "Governor",
            type: "address",
          },
        ],
        internalType: "struct ProtocolDataAggregator.ConstructorParams",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIncentivizedPools",
    outputs: [
      {
        components: [
          {
            internalType: "contract CharmWrapper",
            name: "pool",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "rewardsPortion",
            type: "uint64",
          },
        ],
        internalType: "struct IRewards.PoolConfig[]",
        name: "poolConfigs",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "contract IGovernor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64[]",
        name: "positionIDs",
        type: "uint64[]",
      },
    ],
    name: "positionsCollateralization",
    outputs: [
      {
        internalType: "uint256[]",
        name: "collateralizations",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001600160005090905534801561001b5760006000fd5b50604051610d94380380610d94833981810160405281019061003d919061008e565b5b8060000151600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50610100566100ff565b6000602082840312156100a15760006000fd5b604051602081018181106001600160401b03821117156100d157634e487b7160e01b600052604160045260246000fd5b806040525082516001600160a01b038116811415156100f05760006000fd5b80825250809150505b92915050565b5b610c858061010f6000396000f3fe60806040523480156100115760006000fd5b506004361061006c5760003560e01c80635e016b90116100515780635e016b901461009a57806361bc221a146100ca578063adc7f301146100e85761006c565b80630c340a24146100725780635b34b966146100905761006c565b60006000fd5b61007a610106565b604051610087919061072e565b60405180910390f35b61009861012c565b005b6100b460048036038101906100af91906107fb565b61014c565b6040516100c191906108bf565b60405180910390f35b6100d261035c565b6040516100df919061090e565b60405180910390f35b6100f0610365565b6040516100fd9190610920565b60405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160016000505461013e91906109cd565b60016000508190909055505b565b60606000825190508067ffffffffffffffff81111561016e5761016d610756565b5b60405190808252806020026020018201604052801561019c5781602001602082028036833780820191505090505b50915081506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639624e83e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610211573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102359190610a15565b9050600060006000600090505b84811015610346578373ffffffffffffffffffffffffffffffffffffffff16636594da9f888381518110151561027b5761027a610a3e565b5b60200260200101516040518263ffffffff1660e01b815260040161029f9190610a6f565b604060405180830381865afa1580156102bd573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e19190610a8b565b8093508194505050600083146103095761030483836105c890919063ffffffff16565b61030c565b60005b868281518110151561032157610320610a3e565b5b60200260200101909081815260200150505b808061033e90610ab3565b915050610242565b508494505050505061035756505050505b919050565b60016000505481565b60606000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ec5a8946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d7573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610af2565b905060008173ffffffffffffffffffffffffffffffffffffffff16636fcdfed66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044b573d600060003e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610b1b565b61ffff169050600081141561048c5782925050506105c5566104e5565b8067ffffffffffffffff8111156104a6576104a5610756565b5b6040519080825280602002602001820160405280156104df57816020015b6104cc6106ed565b8152602001906001900390816104c45790505b50925082505b6000600190505b818161ffff161115156105b8578273ffffffffffffffffffffffffffffffffffffffff1663fbe6eb9b826040518263ffffffff1660e01b81526004016105329190610b4e565b604060405180830381865afa158015610550573d600060003e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105749190610b64565b846001836105829190610bcf565b61ffff1681518110151561059957610598610a3e565b5b60200260200101819052505b80806105b090610bf6565b9150506104ec565b5082925050506105c55650505b90565b60006105e383670de0b6b3a7640000846105ee63ffffffff16565b905080505b92915050565b600060006000600019858709858702925082811083820303915050600081141561062e57838281151561062457610623610c1d565b5b04925050506106e6565b808411151561063d5760006000fd5b6000848688099050828111820391508083039250600060018619018616905080860495508084049350600181826000030401905080830284179350835060006002876003021890508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508085029550855085955050505050506106e65650505050505b9392505050565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001509056610c4e565b600060208201905073ffffffffffffffffffffffffffffffffffffffff831682525b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b565b600060405190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156107d3576107d2610756565b5b80604052505b919050565b67ffffffffffffffff8116811415156107f75760006000fd5b505b565b6000602080838503121561080f5760006000fd5b823567ffffffffffffffff808211156108285760006000fd5b818501915085601f830112151561083f5760006000fd5b81358181111561085257610851610756565b5b8060051b9150610863848301610787565b80828252858201915085848601019350888411156108815760006000fd5b85850194505b838510156108af578435925061089c836107de565b82825285820191505b8585019450610887565b8096505050505050505b92915050565b60006020808301818452808551808352604086019150838701925060005b818110156108ff5783518352848301925084840193505b6001810190506108dd565b50508093505050505b92915050565b60006020820190508282525b92915050565b6000602080830181845280855180835260409250828601915083870160005b8281101561098c57815173ffffffffffffffffffffffffffffffffffffffff815116855267ffffffffffffffff87820151168786015250848401935085820191505b60018101905061093f565b5050508093505050505b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b60008282019050808211156109e5576109e461099c565b5b5b92915050565b73ffffffffffffffffffffffffffffffffffffffff811681141515610a115760006000fd5b505b565b600060208284031215610a285760006000fd5b8151610a33816109ec565b809150505b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b565b600060208201905067ffffffffffffffff831682525b92915050565b6000600060408385031215610aa05760006000fd5b82519150602083015190505b9250929050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ae657610ae561099c565b5b6001820190505b919050565b600060208284031215610b055760006000fd5b8151610b10816109ec565b809150505b92915050565b600060208284031215610b2e5760006000fd5b815161ffff811681141515610b435760006000fd5b809150505b92915050565b600060208201905061ffff831682525b92915050565b600060408284031215610b775760006000fd5b6040516040810181811067ffffffffffffffff82111715610b9b57610b9a610756565b5b80604052508251610bab816109ec565b808252506020830151610bbd816107de565b80602083015250809150505b92915050565b600061ffff80841681841603915080821115610bee57610bed61099c565b5b505b92915050565b600061ffff80831681811415610c0f57610c0e61099c565b5b60018101925050505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b565bfea2646970667358221220533dea01f08b8cbfd05a85301a59285a6c3f5b95b0d87f23a8236053860cee8d64736f6c63430008100033";

type ProtocolDataAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProtocolDataAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProtocolDataAggregator__factory extends ContractFactory {
  constructor(...args: ProtocolDataAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: ProtocolDataAggregator.ConstructorParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProtocolDataAggregator> {
    return super.deploy(
      params,
      overrides || {}
    ) as Promise<ProtocolDataAggregator>;
  }
  override getDeployTransaction(
    params: ProtocolDataAggregator.ConstructorParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): ProtocolDataAggregator {
    return super.attach(address) as ProtocolDataAggregator;
  }
  override connect(signer: Signer): ProtocolDataAggregator__factory {
    return super.connect(signer) as ProtocolDataAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolDataAggregatorInterface {
    return new utils.Interface(_abi) as ProtocolDataAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProtocolDataAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProtocolDataAggregator;
  }
}
