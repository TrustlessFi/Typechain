/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TcpSafeMathTestable,
  TcpSafeMathTestableInterface,
} from "../../../../../contracts/core/mocks/TCPSafeMathTestable.sol/TcpSafeMathTestable";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "_div",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "_mul",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b6102d2806100266000396000f3fe60806040523480156100115760006000fd5b506004361061003b5760003560e01c806340248bc3146100415780634bad3327146100715761003b565b60006000fd5b61005b60048036038101906100569190610230565b6100a1565b6040516100689190610258565b60405180910390f35b61008b60048036038101906100869190610230565b6100c1565b6040516100989190610258565b60405180910390f35b60006100b682846100e190919063ffffffff16565b905080505b92915050565b60006100d6828461010790919063ffffffff16565b905080505b92915050565b60006100fc83670de0b6b3a76400008461012d63ffffffff16565b905080505b92915050565b60006101228383670de0b6b3a764000061012d63ffffffff16565b905080505b92915050565b600060006000600019858709858702925082811083820303915050600081141561016d5783828115156101635761016261026a565b5b0492505050610225565b808411151561017c5760006000fd5b6000848688099050828111820391508083039250600060018619018616905080860495508084049350600181826000030401905080830284179350835060006002876003021890508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508085029550855085955050505050506102255650505050505b93925050505661029b565b60006000604083850312156102455760006000fd5b82359150602083013590505b9250929050565b60006020820190508282525b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b565bfea26469706673582212200a6fe8e2c29985570608a6f6876be84795d256297c7fa6ec572358b63af0b05364736f6c63430008100033";

type TcpSafeMathTestableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TcpSafeMathTestableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TcpSafeMathTestable__factory extends ContractFactory {
  constructor(...args: TcpSafeMathTestableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TcpSafeMathTestable> {
    return super.deploy(overrides || {}) as Promise<TcpSafeMathTestable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TcpSafeMathTestable {
    return super.attach(address) as TcpSafeMathTestable;
  }
  override connect(signer: Signer): TcpSafeMathTestable__factory {
    return super.connect(signer) as TcpSafeMathTestable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TcpSafeMathTestableInterface {
    return new utils.Interface(_abi) as TcpSafeMathTestableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TcpSafeMathTestable {
    return new Contract(address, _abi, signerOrProvider) as TcpSafeMathTestable;
  }
}
