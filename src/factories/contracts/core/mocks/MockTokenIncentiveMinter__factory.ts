/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockTokenIncentiveMinter,
  MockTokenIncentiveMinterInterface,
} from "../../../../contracts/core/mocks/MockTokenIncentiveMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "mintIncentive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b5060405161079f38038061079f83398181016040528101906100339190610080565b5b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b506100b9566100b8565b6000602082840312156100935760006000fd5b81516001600160a01b038116811415156100ad5760006000fd5b809150505b92915050565b5b6106d7806100c86000396000f3fe60806040523480156100115760006000fd5b506004361061003b5760003560e01c80634cd7a31514610041578063fc0c546a1461005d5761003b565b60006000fd5b61005b60048036038101906100569190610421565b61007b565b005b6100656100b3565b6040516100729190610470565b60405180910390f35b6100ae600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683836100d963ffffffff16565b5b5050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101608363a9059cbb60e01b84846040516024016100f8929190610498565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061016663ffffffff16565b5b505050565b60006101cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152602001508573ffffffffffffffffffffffffffffffffffffffff166102339092919063ffffffff16565b905060008151111561022d57808060200190518101906101eb91906104c7565b151561022c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610223906104f8565b60405180910390fd5b5b505b5050565b6060610248848460008561025663ffffffff16565b905061024f565b9392505050565b606082471015151561029d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102949061055d565b60405180910390fd5b6102ac8561038263ffffffff16565b15156102ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e4906105c2565b60405180910390fd5b600060008673ffffffffffffffffffffffffffffffffffffffff168587604051610317919061062d565b60006040518083038185875af1925050503d8060008114610354576040519150601f19603f3d011682016040523d82523d6000602084013e610359565b606091505b509150915061036f8282866103ab63ffffffff16565b9250505061037a5650505b949350505050565b600060008273ffffffffffffffffffffffffffffffffffffffff163b1190506103a6565b919050565b606083156103bf5782905061041656610415565b6000835111156103d75782518084602001fd50610414565b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040b919061064c565b60405180910390fd5b5b5b9392505050566106a0565b60006000604083850312156104365760006000fd5b823573ffffffffffffffffffffffffffffffffffffffff81168114151561045d5760006000fd5b80925050602083013590505b9250929050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff831682525b92915050565b600060408201905073ffffffffffffffffffffffffffffffffffffffff841682528260208301525b9392505050565b6000602082840312156104da5760006000fd5b8151801515811415156104ed5760006000fd5b809150505b92915050565b60208152602a60208201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260006080820190505b919050565b60208152602660208201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260006080820190505b919050565b60208152601d60208201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260006060820190505b919050565b60005b838110156106205780820151818401525b602081019050610604565b506000838301525050505b565b6000825161063f818460208701610601565b8083019150505b92915050565b602081526000825180602084015261066b816040850160208701610601565b60407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150505b92915050565bfea26469706673582212209981c28899674c98da76703d4a3fd39fef5e71c8fc65b4648a92407ca914aa4364736f6c63430008100033";

type MockTokenIncentiveMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenIncentiveMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTokenIncentiveMinter__factory extends ContractFactory {
  constructor(...args: MockTokenIncentiveMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockTokenIncentiveMinter> {
    return super.deploy(
      _token,
      overrides || {}
    ) as Promise<MockTokenIncentiveMinter>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): MockTokenIncentiveMinter {
    return super.attach(address) as MockTokenIncentiveMinter;
  }
  override connect(signer: Signer): MockTokenIncentiveMinter__factory {
    return super.connect(signer) as MockTokenIncentiveMinter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenIncentiveMinterInterface {
    return new utils.Interface(_abi) as MockTokenIncentiveMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTokenIncentiveMinter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockTokenIncentiveMinter;
  }
}
