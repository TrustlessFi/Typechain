/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockProtocolToken,
  MockProtocolTokenInterface,
} from "../../../../contracts/core/mocks/MockProtocolToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "delegatee",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156100115760006000fd5b50610017565b60cb806100256000396000f3fe608060405234801560105760006000fd5b5060043610602c5760003560e01c80635c19a95c14603257602c565b60006000fd5b60486004803603810190604491906051565b604a565b005b5b50566094565b60006020828403121560635760006000fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114151560895760006000fd5b809150505b92915050565bfea264697066735822122091cb17679dc74a08b224abcb1d31d245ce25ec308e9c9d201229191d4c38951264736f6c634300080c0033";

type MockProtocolTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockProtocolTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockProtocolToken__factory extends ContractFactory {
  constructor(...args: MockProtocolTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockProtocolToken> {
    return super.deploy(overrides || {}) as Promise<MockProtocolToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockProtocolToken {
    return super.attach(address) as MockProtocolToken;
  }
  override connect(signer: Signer): MockProtocolToken__factory {
    return super.connect(signer) as MockProtocolToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockProtocolTokenInterface {
    return new utils.Interface(_abi) as MockProtocolTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockProtocolToken {
    return new Contract(address, _abi, signerOrProvider) as MockProtocolToken;
  }
}
