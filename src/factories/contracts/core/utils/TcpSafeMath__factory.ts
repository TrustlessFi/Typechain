/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TcpSafeMath,
  TcpSafeMathInterface,
} from "../../../../contracts/core/utils/TcpSafeMath";

const _abi = [
  {
    inputs: [],
    name: "ONE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60ae610055600b82828239805160001a6073141515610047577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f350fe730000000000000000000000000000000000000000301460806040526004361060365760003560e01c8063c2ee3a0814603c576036565b60006000fd5b60426056565b604051604d91906065565b60405180910390f35b670de0b6b3a764000081566077565b60006020820190508282525b92915050565bfea2646970667358221220b9012ccea73c5080a0330ccf30c36e0113dde632e454b2616d3fed90266c536564736f6c63430008100033";

type TcpSafeMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TcpSafeMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TcpSafeMath__factory extends ContractFactory {
  constructor(...args: TcpSafeMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TcpSafeMath> {
    return super.deploy(overrides || {}) as Promise<TcpSafeMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TcpSafeMath {
    return super.attach(address) as TcpSafeMath;
  }
  override connect(signer: Signer): TcpSafeMath__factory {
    return super.connect(signer) as TcpSafeMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TcpSafeMathInterface {
    return new utils.Interface(_abi) as TcpSafeMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TcpSafeMath {
    return new Contract(address, _abi, signerOrProvider) as TcpSafeMath;
  }
}
