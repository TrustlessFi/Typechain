var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
var _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "x",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "y",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "d",
                type: "uint256",
            },
        ],
        name: "checkMulDiv",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "x",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "y",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "d",
                type: "uint256",
            },
        ],
        name: "checkMulDivRounding",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "x",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "y",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "d",
                type: "uint256",
            },
        ],
        name: "checkMulDivRoundingUp",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
];
var _bytecode = "0x60806040523480156100115760006000fd5b50610017565b61048e806100266000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c8063695363a31461004c57806379eee4871461008f578063bf08c391146100d257610046565b60006000fd5b61008d600480360360608110156100635760006000fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610115565b005b6100d0600480360360608110156100a65760006000fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061018b565b005b610113600480360360608110156100e95760006000fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061023b565b005b6000811115156101255760006000fd5b60006101388484846102eb63ffffffff16565b9050600061014d85858561035763ffffffff16565b905060008380151561015b57fe5b858709111561017757600181830314151561017257fe5b610183565b808214151561018257fe5b5b50505b505050565b60008111151561019b5760006000fd5b60006101ae8484846102eb63ffffffff16565b905060008414806101bf5750600083145b156101d6576000811415156101d057fe5b50610236565b60006101e982848661035763ffffffff16565b905060006101fe83858861035763ffffffff16565b905085821015151561020c57fe5b84811015151561021857fe5b8386830310151561022557fe5b8385820310151561023257fe5b5050505b505050565b60008111151561024b5760006000fd5b600061025e84848461035763ffffffff16565b9050600084148061026f5750600083145b156102865760008114151561028057fe5b506102e6565b600061029982848661035763ffffffff16565b905060006102ae83858861035763ffffffff16565b90508582111515156102bc57fe5b8481111515156102c857fe5b838287031015156102d557fe5b838186031015156102e257fe5b5050505b505050565b60006102fe84848461035763ffffffff16565b9050805060008280151561030e57fe5b848609111561034f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015156103465760006000fd5b80806001019150505b5b9392505050565b600060006000600019858709858702925082811083820303915050600081141561039a5760008411151561038b5760006000fd5b83820492508292505050610451565b80841115156103a95760006000fd5b60008486880990508281118203915080830392506000858660000316905080860495508084049350600181826000030401905080830284179350835060006002876003021890508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508087026002038102905080508085029550855085955050505050506104515650505050505b939250505056fea264697066735822122094513d9416171a3e2ddf4d32fdde0d93f06ee165e2b45a6638fd9704bc1645db64736f6c63430007060033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var FullMathEchidnaTest__factory = /** @class */ (function (_super) {
    __extends(FullMathEchidnaTest__factory, _super);
    function FullMathEchidnaTest__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    FullMathEchidnaTest__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    FullMathEchidnaTest__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    FullMathEchidnaTest__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    FullMathEchidnaTest__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    FullMathEchidnaTest__factory.createInterface = function () {
        return new utils.Interface(_abi);
    };
    FullMathEchidnaTest__factory.connect = function (address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    };
    FullMathEchidnaTest__factory.bytecode = _bytecode;
    FullMathEchidnaTest__factory.abi = _abi;
    return FullMathEchidnaTest__factory;
}(ContractFactory));
export { FullMathEchidnaTest__factory };
