var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory, } from "ethers";
var _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amountToMint",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Approval",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "Transfer",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "mint",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "recipient",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address",
            },
            {
                internalType: "address",
                name: "recipient",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
var _bytecode = "0x60806040523480156100115760006000fd5b50604051610ee0380380610ee08339818101604052810190610033919061013b565b5b610044338261004b60201b60201c565b5b506101c5565b600081600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505461009e9190610159565b90508181101515156100e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100dc90610185565b60405180910390fd5b80600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819090905550505b5050566101c4565b60006020828403121561014e5760006000fd5b815190505b92915050565b600082820190508082111561017e57634e487b7160e01b600052601160045260246000fd5b5b92915050565b60208152601060208201527f6f766572666c6f772062616c616e636500000000000000000000000000000000604082015260006060820190505b919050565b5b610d0c806101d46000396000f3fe60806040523480156100115760006000fd5b50600436106100775760003560e01c806370a082311161005157806370a08231146100f9578063a9059cbb14610129578063dd62ed3e1461015957610077565b8063095ea7b31461007d57806323b872dd146100ad57806340c10f19146100dd57610077565b60006000fd5b610097600480360381019061009291906109fd565b610189565b6040516100a49190610a2c565b60405180910390f35b6100c760048036038101906100c29190610a40565b61028b565b6040516100d49190610a2c565b60405180910390f35b6100f760048036038101906100f291906109fd565b610645565b005b610113600480360381019061010e9190610a7f565b610731565b6040516101209190610aa4565b60405180910390f35b610143600480360381019061013e91906109fd565b61074c565b6040516101509190610a2c565b60405180910390f35b610173600480360381019061016e9190610ab6565b61099d565b6040516101809190610aa4565b60405180910390f35b600081600160005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516102749190610aa4565b60405180910390a360019050610285565b92915050565b60006000600160005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905082811015151561035c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035390610aec565b60405180910390fd5b82816103689190610b5c565b600160005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506000600060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905080848261044a9190610b7b565b1015151561048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490610b9a565b60405180910390fd5b83816104999190610b7b565b600060005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506000600060005060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050549050848110151515610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90610bd9565b60405180910390fd5b848161057f9190610b5c565b600060005060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040516106279190610aa4565b60405180910390a36001935050505061063e565050505b9392505050565b600081600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050546106989190610b7b565b90508181101515156106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690610c18565b60405180910390fd5b80600060005060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050819090905550505b5050565b60006000506020528060005260406000206000915090505481565b60006000600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000505490508281101515156107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d490610c57565b60405180910390fd5b82816107e99190610b5c565b600060005060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055506000600060005060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005054905080848261088b9190610b7b565b101515156108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590610c96565b60405180910390fd5b83816108da9190610b7b565b600060005060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000508190909055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516109829190610aa4565b60405180910390a36001925050506109975650505b92915050565b600160005060205281600052604060002060005060205280600052604060002060009150915050548156610cd5565b60008135905073ffffffffffffffffffffffffffffffffffffffff8116811415156109f75760006000fd5b5b919050565b6000600060408385031215610a125760006000fd5b610a1b836109cc565b9150602083013590505b9250929050565b600060208201905082151582525b92915050565b60006000600060608486031215610a575760006000fd5b610a60846109cc565b9250610a6e602085016109cc565b9150604084013590505b9250925092565b600060208284031215610a925760006000fd5b610a9b826109cc565b90505b92915050565b60006020820190508282525b92915050565b6000600060408385031215610acb5760006000fd5b610ad4836109cc565b9150610ae2602084016109cc565b90505b9250929050565b60208152601660208201527f616c6c6f77616e636520696e73756666696369656e7400000000000000000000604082015260006060820190505b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b565b6000828203905081811115610b7457610b73610b2b565b5b5b92915050565b6000828201905080821115610b9357610b92610b2b565b5b5b92915050565b60208152601a60208201527f6f766572666c6f772062616c616e636520726563697069656e74000000000000604082015260006060820190505b919050565b60208152601860208201527f756e646572666c6f772062616c616e63652073656e6465720000000000000000604082015260006060820190505b919050565b60208152601060208201527f6f766572666c6f772062616c616e636500000000000000000000000000000000604082015260006060820190505b919050565b60208152601460208201527f696e73756666696369656e742062616c616e6365000000000000000000000000604082015260006060820190505b919050565b60208152601a60208201527f726563697069656e742062616c616e6365206f766572666c6f77000000000000604082015260006060820190505b919050565bfea26469706673582212200e29ad293772337320bc4c68e4827bff708fea96bdaa26fb247cdbdd7abb75d664736f6c63430008100033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var TestERC20__factory = /** @class */ (function (_super) {
    __extends(TestERC20__factory, _super);
    function TestERC20__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    TestERC20__factory.prototype.deploy = function (amountToMint, overrides) {
        return _super.prototype.deploy.call(this, amountToMint, overrides || {});
    };
    TestERC20__factory.prototype.getDeployTransaction = function (amountToMint, overrides) {
        return _super.prototype.getDeployTransaction.call(this, amountToMint, overrides || {});
    };
    TestERC20__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    TestERC20__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    TestERC20__factory.createInterface = function () {
        return new utils.Interface(_abi);
    };
    TestERC20__factory.connect = function (address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    };
    TestERC20__factory.bytecode = _bytecode;
    TestERC20__factory.abi = _abi;
    return TestERC20__factory;
}(ContractFactory));
export { TestERC20__factory };
